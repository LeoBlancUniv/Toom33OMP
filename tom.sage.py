

# This file was *autogenerated* from the file tom.sage
from sage.all_cmdline import *   # import sage library

_sage_const_8192 = Integer(8192); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_6 = Integer(6); _sage_constntegersage_constnteger
n = _sage_const_8192 
l = ceil(n / _sage_const_3 )

def toPoly(x):
    ret = []
    
    
    while(x != _sage_const_0 ):

        ret += [x % (_sage_const_1  << l)]
        x = x >> l
    
    return ret

def eval(p, x):
    
    ret = _sage_const_0 
    
    for i in range(len(p)):
        ret += p[i] * (x ** i)
       
    return ret

def point(p):
    
    ret = []
    ret += [p[_sage_const_2 ]]
    x = [_sage_const_2 , -_sage_const_1 , _sage_const_1 , _sage_const_0 ]
    
    for el in x:
        ret += [eval(p, el)]
    return ret

def calcAB(ABpts):
    ret = []
    
    ret += [ABpts[_sage_const_4 ]] #0
    
    ret += [_sage_const_2  * ABpts[_sage_const_0 ] - ABpts[_sage_const_1 ]/_sage_const_6  - ABpts[_sage_const_2 ]/_sage_const_3  + ABpts[_sage_const_3 ] - ABpts[_sage_const_4 ]/_sage_const_2 ]
    
    ret += [- ABpts[_sage_const_0 ] +  ABpts[_sage_const_2 ]/_sage_const_2  +  ABpts[_sage_const_3 ]/_sage_const_2  -  ABpts[_sage_const_4 ]]
    
    ret += [-_sage_const_2  *  ABpts[_sage_const_0 ] + ABpts[_sage_const_1 ]/_sage_const_6  -  ABpts[_sage_const_2 ]/_sage_const_6  - ABpts[_sage_const_3 ]/_sage_const_2  +  ABpts[_sage_const_4 ]/_sage_const_2  ]
    
    ret += [ ABpts[_sage_const_0 ]]
    
    return ret
    

a = _sage_const
b = _sage_const
ab = a *b

A = toPoly(abs(a))
print(A)
B = toPoly(abs(b))

Apts = point(A)
Bpts = point(B)

print(Apts)

print()

print(Bpts)

#calc a faire avec un autre algo de mult dans l'idée

ABpts = [Apts[i] * Bpts[i] for i in range(len(Apts))]

print(ABpts);
print()
AB = calcAB(ABpts)

print(AB)
print()
ab_tm = eval(AB, _sage_const_2 **l)

print(ab)
print()
print(ab_tm)



























        

